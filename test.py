import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

# Configura logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")  # Usa variables de entorno!

# --- Soluci√≥n al conflicto ---
async def cleanup_previous_sessions():
    """Elimina webhooks y sesiones previas"""
    temp_bot = Bot(token=TOKEN)
    await temp_bot.delete_webhook(drop_pending_updates=True)
    await temp_bot.session.close()

# Configura bot con timeout extendido
bot = Bot(
    token=TOKEN,
    parse_mode=ParseMode.HTML,
    session_timeout=600  # 10 minutos
)
dp = Dispatcher(storage=MemoryStorage())

# Teclado
def build_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton(text="–¢–∞—Ä–∏—Ñ—ã")],
            [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
        ],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=build_keyboard()
    )

@dp.message()
async def handle_message(message: types.Message):
    text = message.text.lower()
    if '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è' in text:
        await message.answer("üìù –§–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ üëâ [tu_enlace]")
    elif '—Ç–∞—Ä–∏—Ñ—ã' in text:
        await message.answer("üí∏ –¢–∞—Ä–∏—Ñ—ã:\n‚Äî 30 –º–∏–Ω: 500 ‚ÇΩ\n‚Äî 5 —É—Ä–æ–∫–æ–≤: 2000 ‚ÇΩ")
    elif '–æ—Ç–∑—ã–≤' in text:
        await message.answer("üôè –û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –∏–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ üëâ [tu_enlace]")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ ‚¨áÔ∏è")

async def main():
    # Limpieza inicial cr√≠tica
    await cleanup_previous_sessions()
    
    try:
        await dp.start_polling(
            bot,
            handle_signals=False,  # Evita conflictos con se√±ales del sistema
            allowed_updates=dp.resolve_used_update_types(),
            close_bot_session=False  # Previene cierres abruptos
        )
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
if __name__ == "__main__":
    asyncio.run(main())
