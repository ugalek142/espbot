import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

# --- Configuraci√≥n b√°sica ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")  # Usa variables de entorno!
if not TOKEN:
    logger.error("‚ùå No se encontr√≥ BOT_TOKEN")
    exit(1)

# --- Inicializaci√≥n del bot ---
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# --- Teclado interactivo ---
def build_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton(text="–¢–∞—Ä–∏—Ñ—ã")],
            [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

# --- Manejadores ---
@dp.message(Command("start"))
async def start(message: types.Message):
    try:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=build_keyboard()
        )
    except Exception as e:
        logger.error(f"Error en start: {e}")

@dp.message()
async def handle_message(message: types.Message):
    try:
        text = message.text.lower()
        
        if '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è' in text:
            await message.answer(
                "üìù <b>–§–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>\n"
                "üëâ https://docs.google.com/forms/d/e/1FAIpQLSdR5Nvy8ltm1SyVvxCeh1NzhIvOr9kNr4C8anDu_I-cIPdHRA/viewform",
                parse_mode=ParseMode.HTML
            )
        elif '—Ç–∞—Ä–∏—Ñ—ã' in text:
            await message.answer(
                "üíµ <b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n"
                "‚Ä¢ 30 –º–∏–Ω—É—Ç: <b>500 ‚ÇΩ</b>\n"
                "‚Ä¢ 5 —É—Ä–æ–∫–æ–≤: <b>2000 ‚ÇΩ</b>\n"
                "‚Ä¢ 10 —É—Ä–æ–∫–æ–≤: <b>3500 ‚ÇΩ</b>",
                parse_mode=ParseMode.HTML
            )
        elif '–æ—Ç–∑—ã–≤' in text:
            await message.answer(
                "üì¢ <b>–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:</b>\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å!",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=build_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error al manejar mensaje: {e}")

# --- Manejo de ciclo de vida ---
async def on_startup():
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("‚úÖ Bot iniciado")

async def on_shutdown():
    await dp.storage.close()
    await bot.session.close()
    logger.info("‚ùå Bot detenido")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(f"Error cr√≠tico: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
